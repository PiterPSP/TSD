$ kubectl create -f deployment.yaml
deployment.apps/helminiak createdcle

$ kubectl get deployment
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
helminiak   3/3     3            3           5m4s

$ kubectl create -f service.yaml
service/helminiak-svc created


$ kubectl describe deployment helminiak
Name:                   helminiak
Namespace:              default
CreationTimestamp:      Sun, 07 Jun 2020 19:08:02 +0000
Labels:                 app=helminiak
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=helminiak
Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=helminiak
  Containers:
   server:
    Image:        nginx
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:
      /usr/share/nginx/html from data-store (rw)
   provider:
    Image:      alpine
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
    Args:
      -c
      while true; do
        date >> /pod-data/index.html;
      done

    Environment:  <none>
    Mounts:
      /pod-data from data-store (rw)
  Volumes:
   data-store:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:
    SizeLimit:  <unset>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   helminiak-c6d997dd6 (3/3 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  5m28s  deployment-controller  Scaled up replica set helminiak-c6d997dd6 to 3


$ kubectl describe svc helminiak-svc
Name:                     helminiak-svc
Namespace:                default
Labels:                   app=helminiak
Annotations:              <none>
Selector:                 app=helminiak
Type:                     NodePort
IP:                       10.105.23.0
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  31000/TCP
Endpoints:                172.18.0.4:80,172.18.0.5:80,172.18.0.6:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>


$ kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
helminiak-c6d997dd6-hphpm   2/2     Running   0          9m51s
helminiak-c6d997dd6-q47cq   2/2     Running   0          9m51s
helminiak-c6d997dd6-vdfkf   2/2     Running   0          9m51s

$ kubectl get nodes -o wide
NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
minikube   Ready    master   40m   v1.17.3   172.17.0.51   <none>        Ubuntu 18.04.4 LTS   4.15.0-88-generic   docker://19.3.6

curl 172.17.0.51:31000

$ curl 172.17.0.51:31000
Sun Jun  7 19:12:23 UTC 2020
Sun Jun  7 19:12:23 UTC 2020
Sun Jun  7 19:12:23 UTC 2020
itd...

$ kubectl logs helminiak-c6d997dd6-vdfkf server
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
172.18.0.1 - - [07/Jun/2020:19:36:09 +0000] "GET / HTTP/1.1" 200 13293256 "-" "curl/7.58.0" "-"